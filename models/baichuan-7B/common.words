64000                   "VOCAB_SIZE"            !
4096                    "HIDDEN_SIZE"           !
11008                   "INTERMEDIATE_SIZE"     !
32                      "HEADS_NUM"             !
128                     "HEAD_HIDDEN"           !
4096                    "MAX_POSITION_EMB"      !

1e-06                   "RMS_EPS"               !
0.5                     "TEMPERATURE"           !
0.90                    "TOP_P"                 !

%def create_variable
    1 "cuda" rot op.create  "_var_"     !
    
    dup dup dup dup
    
    1 "cpu"  "int"  op.create  "_ids_"     !
    1 "cpu"  "int"  op.create  "_mask_"    !

    1 "cuda" "int" op.create "_ids" !
    1 "cuda" "int" op.create "_mask" !

    "MAX_POSITION_EMB" @  "HEAD_HIDDEN" @ 2 3 "cuda" "float" op.create dup 
    10000.0 op.rotary_cache 
    "rotary_cache" !
%end

%def create_input_weight
    $DTYPE !
    $DEVICE !

    "VOCAB_SIZE" @ "HIDDEN_SIZE" @ 2 $DEVICE @ $DTYPE @  op.create "embed_tokens.weight"  !

    $DTYPE  !!
    $DEVICE !!
%end

%def create_output_weight
    $DTYPE !
    $DEVICE !

    "HIDDEN_SIZE" @  1 $DEVICE @ $DTYPE @  op.create  "norm.weight"  !
    "VOCAB_SIZE" @ "HIDDEN_SIZE" @ 2 $DEVICE @ $DTYPE @ op.create "lm_head.weight" !

    $DTYPE  !!
    $DEVICE !!
%end

%def create_layer_weight
    $DTYPE !
    $DEVICE !

    (1 1 "HIDDEN_SIZE" @  3 $DEVICE @ $DTYPE @)  op.create      "input_layernorm.weight"  !
    (1 1 "HIDDEN_SIZE" @  3 $DEVICE @ $DTYPE @)  op.create  "post_attention_layernorm.weight"  !

    ("HIDDEN_SIZE" @ 3 * "HIDDEN_SIZE" @ 2 $DEVICE @  $DTYPE @)  op.create     "query_key_value.weight"  !
    ;
    ; dummy split to three tensors, 4096 * 4096 = 16777216
    ;
    ("query_key_value.weight" @ 0                       "HIDDEN_SIZE" @ dup 2 op.view)    "query.weight" !
    ("query_key_value.weight" @ ("HIDDEN_SIZE" @ dup *)       "HIDDEN_SIZE" @ dup 2 op.view)    "key.weight" !
    ("query_key_value.weight" @ ("HIDDEN_SIZE" @ dup * 2 *) "HIDDEN_SIZE" @ dup 2 op.view)    "value.weight" !
    
    ("HEADS_NUM" @ 2 * 1 $DEVICE @  $DTYPE @)  op.create  "rotary_emb.inv_freq" !
    ("HIDDEN_SIZE" @  "HIDDEN_SIZE" @ 2 $DEVICE @  $DTYPE @)  op.create    "o_proj.weight"  !

    ("INTERMEDIATE_SIZE" @  "HIDDEN_SIZE" @ 2 $DEVICE @  $DTYPE @)  op.create    "gate_proj.weight"  !
    ("INTERMEDIATE_SIZE" @  "HIDDEN_SIZE" @ 2 $DEVICE @  $DTYPE @)  op.create    "up_proj.weight"  !
    ("HIDDEN_SIZE" @  "INTERMEDIATE_SIZE" @ 2 $DEVICE @  $DTYPE @)  op.create    "down_proj.weight"  !

    $DTYPE !!
    $DEVICE !!
%end

%def load_input_weight
    "Loading input weight..." echo 
    
    $weights_path ! 

    "embed_tokens.weight" @
    $weights_path @ "embed_tokens.bin" |
    io.load

    $weights_path !!

    "Loaded input weight." echo
%end

%def load_output_weight
    "Loading output weight..." echo 
    
    $weights_path ! 
    
    "norm.weight" @
    $weights_path @ "norm.bin"  |
    io.load

    "lm_head.weight" @
    $weights_path @ "lm_head.bin"  |
    io.load

    $weights_path !!

    "Loaded output weight." echo
%end

%def load_layer_weight
    $weights_path ! 
    
    "Loading... " $weights_path @ | echo
    {
        "input_layernorm.weight" @
        $weights_path @  ".input_layernorm.weight.bin" | 
        io.load
    }
    
    {
        "post_attention_layernorm.weight" @
        $weights_path @  ".post_attention_layernorm.weight.bin" | 
        io.load
    }

    {
        "query_key_value.weight" @
        $weights_path @  ".self_attn.W_pack.weight.bin" | 
        io.load
    }
    
    {
        "rotary_emb.inv_freq" @
        $weights_path @  ".self_attn.rotary_emb.inv_freq.bin" | 
        io.load
    }

    {
        "o_proj.weight" @
        $weights_path @  ".self_attn.o_proj.weight.bin" | 
        io.load
    }

    {
        "gate_proj.weight" @
        $weights_path @  ".mlp.gate_proj.weight.bin" | 
        io.load
    }
    
    {
        "up_proj.weight" @
        $weights_path @  ".mlp.up_proj.weight.bin" | 
        io.load
    }
    
    {
        "down_proj.weight" @
        $weights_path @  ".mlp.down_proj.weight.bin" | 
        io.load
    }

    "Loaded " $weights_path @ | echo
    
    $weights_path !!
%end

%def sync_layer_clone
    dup
    #       "input_layernorm.weight" @  
    0 #     "input_layernorm.weight" !
    
    dup
    #       "query_key_value.weight" @
    0 #     "query_key_value.weight" !
    
    dup
    #       "post_attention_layernorm.weight" @
    0 #     "post_attention_layernorm.weight" !
    
    dup  
    #       "rotary_emb.inv_freq" @
    0 #     "rotary_emb.inv_freq" !
    
    dup  
    #       "o_proj.weight" @
    0 #     "o_proj.weight" !
    
    dup
    #       "gate_proj.weight" @
    0 #     "gate_proj.weight" !

    dup
    #       "up_proj.weight" @
    0 #     "up_proj.weight" !

    #       "down_proj.weight" @
    0 #     "down_proj.weight" !
%end

%def sync_layer_offload
    dup
    0 #        "input_layernorm.weight" @  
    swap #     "input_layernorm.weight" @  op.copy
    
    dup
    0 #        "query_key_value.weight" @
    swap #     "query_key_value.weight" @  op.copy 
    
    dup
    0 #        "post_attention_layernorm.weight" @
    swap #     "post_attention_layernorm.weight" @  op.copy
    
    dup
    0 #        "rotary_emb.inv_freq" @
    swap #     "rotary_emb.inv_freq" @ op.copy
    
    dup
    0 #        "o_proj.weight" @
    swap #     "o_proj.weight" @ op.copy
    
    dup  
    0 #        "gate_proj.weight" @
    swap #     "gate_proj.weight" @ op.copy
    
    dup
    0 #        "up_proj.weight" @
    swap #     "up_proj.weight" @ op.copy
    
    0 #        "down_proj.weight" @
    swap #     "down_proj.weight" @ op.copy
    
    0 #
%end

%def create_dynamic
    $tokens !
    $batch  !

    "_ids_" @ 0  $batch @   $tokens @  2 op.view  "ids_" !
    "_mask_" @ 0  $batch @   $tokens @  2 op.view  "mask_" !
   
    "_ids" @ 0  $batch @   $tokens @  2 op.view  "ids" !
    "_mask" @ 0  $batch @  $tokens @  2 op.view  "mask" !

    ;; xinput in GPU, xinput_ in CPU
    {
        "_var_" @ 0  $batch @   $tokens @  "HIDDEN_SIZE" @ 3 op.view  "xinput" !
        $batch @ $tokens @ "HIDDEN_SIZE" @ * *
        
        dup
        "_var_" @ swap  $batch @  $tokens @  "HIDDEN_SIZE" @ 3 op.view  "yout_g" !
        $batch @ $tokens @ "HIDDEN_SIZE" @ * * +
    }

    ;; causal mask, norm2 in GPU
    {
        dup
        "_var_" @ swap $batch @ 1 $tokens @  $tokens @  4 op.view   "causal_mask"  !
        $batch @ $tokens @ $tokens @ * * +

        dup
        "_var_" @ swap $batch @ $tokens @ 1 3 op.view "norm2" !
        $batch @ $tokens @ * +
    }

    ;; xa, xb, xc
    {
        dup dup dup
        "_var_" @ swap $batch @ $tokens @ "HIDDEN_SIZE" @ 3 op.view "xa" !
        "_var_" @ swap $batch @ $tokens @ "HEADS_NUM" @ "HEAD_HIDDEN" @ 4 op.view "ya" !
        "_var_" @ swap $batch @ "HEADS_NUM" @ $tokens @ "HEAD_HIDDEN" @ 4 op.view "za" !
        $batch @ $tokens @ "HIDDEN_SIZE" @  * * +

        dup dup dup
        "_var_" @ swap $batch @ $tokens @ "HIDDEN_SIZE" @ 3 op.view "xb" !
        "_var_" @ swap $batch @ $tokens @ "HEADS_NUM" @ "HEAD_HIDDEN" @ 4 op.view "yb" !
        "_var_" @ swap $batch @ "HEADS_NUM" @ $tokens @ "HEAD_HIDDEN" @ 4 op.view "zb" !
        $batch @ $tokens @ "HIDDEN_SIZE" @  * * +

        dup dup dup
        "_var_" @ swap $batch @ $tokens @ "HIDDEN_SIZE" @ 3 op.view "xc" !
        "_var_" @ swap $batch @ $tokens @ "HEADS_NUM" @ "HEAD_HIDDEN" @ 4 op.view "yc" !
        "_var_" @ swap $batch @ "HEADS_NUM" @ $tokens @ "HEAD_HIDDEN" @ 4 op.view "zc" !
        $batch @ $tokens @ "HIDDEN_SIZE" @  * * +
    }

    ;; xattn_in, xattn_out, kqv,  x4a, x4b, xll
    {
        dup dup
        "_var_" @ swap $batch @ $tokens @ "HIDDEN_SIZE" @ 3 op.view "xattn_in" !
        $batch @ $tokens @ "HIDDEN_SIZE" @  * * +

        dup dup
        "_var_" @ swap $batch @ $tokens @ "HIDDEN_SIZE" @ 3 op.view "xattn_out" !
        "_var_" @ swap $batch @ $tokens @ "HEADS_NUM" @ "HEAD_HIDDEN" @ 4 op.view "yattn_out" !
        $batch @ $tokens @ "HIDDEN_SIZE" @  * * +

        dup dup dup
        "_var_" @ swap $batch @ $tokens @ "HIDDEN_SIZE" @ 3 op.view "xquery" !
        "_var_" @ swap $batch @ "HEADS_NUM" @ $tokens @ "HEAD_HIDDEN" @ 4 op.view "zquery" !
        "_var_" @ swap $batch @ $tokens @ "HEADS_NUM" @ "HEAD_HIDDEN" @ 4 op.view "yquery" !
        $batch @ $tokens @ "HIDDEN_SIZE" @  * * +

        dup dup dup
        "_var_" @ swap $batch @ $tokens @ "HIDDEN_SIZE" @ 3 op.view "xkey" !
        "_var_" @ swap $batch @ "HEADS_NUM" @ $tokens @ "HEAD_HIDDEN" @ 4 op.view "zkey"  !
        "_var_" @ swap $batch @ $tokens @ "HEADS_NUM" @ "HEAD_HIDDEN" @ 4 op.view "ykey" !
        $batch @ $tokens @ "HIDDEN_SIZE" @  * * +

        dup dup dup
        "_var_" @ swap $batch @ $tokens @ "HIDDEN_SIZE" @ 3 op.view "xvalue" !
        "_var_" @ swap $batch @ "HEADS_NUM" @ $tokens @ "HEAD_HIDDEN" @ 4 op.view "zvalue" !
        "_var_" @ swap $batch @ $tokens @ "HEADS_NUM" @ "HEAD_HIDDEN" @ 4 op.view "yvalue" !
        $batch @ $tokens @ "HIDDEN_SIZE" @  * * +

        dup
        "_var_" @ swap $batch @ $tokens @ ("HIDDEN_SIZE" @ 4 *) 3 op.view "x4a" !
        $batch @ $tokens @ "HIDDEN_SIZE" @ 4 * * * +

        dup
        "_var_" @ swap $batch @ $tokens @ ("HIDDEN_SIZE" @ 4 *) 3 op.view "x4b" !
        $batch @ $tokens @ "HIDDEN_SIZE" @ 4 * * * +

        "_var_" @ swap $batch @ "HEADS_NUM" @ $tokens @ $tokens @ 4 op.view "xll" !
    }

    ;; output logits , shared with attn_in
    {
        "_var_" @ swap $batch @ "VOCAB_SIZE" @ 2 op.view  "all_logits" !
    }

    $tokens !!
    $batch !!
%end

%def layer_forward
    "xinput" @ "input_layernorm.weight" @ "norm2" @ "xattn_in" @ "RMS_EPS" @ op.rmsnorm
   
    ;; get kqv & transpose
    {
        "xattn_in" @ "query.weight" @  op.null "xa" @ op.linear
        "xattn_in" @ "key.weight" @  op.null "xb" @ op.linear
        "xattn_in" @ "value.weight" @  op.null "xc" @ op.linear

        "ya" @ "zquery" @ op.transpos_0213
        "yb" @ "zkey" @ op.transpos_0213
        "yc" @ "zvalue" @ op.transpos_0213
    }

    ;; rotary position embeding
    "zquery" @ "rotary_cache" @ "za" @ op.rotary_embed
    "zkey" @ "rotary_cache" @ "zb" @ op.rotary_embed
    
    ;; attention
    {
        ;; get query@key
        "za" @  "zb" @  "xll" @ op.querykey
        
        ;; apply causal_mask
        "xll" @ "causal_mask" @ "xll" @ op.add
        
        ;; do softmax
        "xll" @ "xll" @ op.softmax
    
        ;; do attention and transpose back
        "xll" @ "zvalue" @  "zc" @ op.attn          ;; attn -> zc
        "zc" @ "yattn_out" @ op.transpos_0213
    }
    
    ;; linear proj


%end

